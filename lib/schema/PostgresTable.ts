import ColumnDefinition from 'lib/schema/ColumnDefinition';
import ElegantTable from "./ElegantTable";
import {BooleanColumnDefinition, TimestampColumnDefinition} from './TableDefinitions';
import {exit} from '../util';

export default class PostgresTable extends ElegantTable {
  protected enclosure: string = '"';

  boolean(columnName: string, defaultValue?: boolean, nullable?: boolean): ColumnDefinition {
    const column = new BooleanColumnDefinition(columnName, defaultValue, nullable)
    this.columns.push(column)
    return column
  }

  protected columnToSql(column: ColumnDefinition): string {
    let sql = `${this.enclose(column.name)} ${column.type}`;
    if (column.$.unsigned) sql += ' UNSIGNED'
    sql += column.$.nullable ? ' NULL' : ' NOT NULL'
    if (column.$.autoIncrement) sql += ' GENERATED BY DEFAULT AS IDENTITY'
    if (column.$.primary) {
      sql += ' PRIMARY KEY'
    } else if (column.$.unique) {
      sql += (column.$.key) ? ' UNIQUE KEY' : ' UNIQUE'
    }
    if (column.$.default) sql += ` DEFAULT ${column.$.default}`
    if (column instanceof TimestampColumnDefinition) {
      if (column.$.onUpdate) sql += ` ON UPDATE ${column.$.onUpdate}`
    }
    if (column.$.key) sql += ` KEY ${column.$.key}`
    if (column.$.comment) sql += ` COMMENT '${column.$.comment}'`
    return sql
  }

  public toUpdateStatement(): string {
      throw new Error('Method not implemented.');
  }
}
