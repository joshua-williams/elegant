import ColumnDefinition from 'lib/schema/ColumnDefinition';
import SchemaTable from "./SchemaTable";
import {BooleanColumnDefinition, TimestampColumnDefinition} from './TableDefinitions';

export default class PostgresSchemaTable extends SchemaTable {
  protected enclosure: string = '"';

  boolean(columnName: string, defaultValue?: boolean, nullable?: boolean): ColumnDefinition {
    const column = new BooleanColumnDefinition(columnName, defaultValue, nullable)
    this.columns.push(column)
    return column
  }

  private columnToSql(column: ColumnDefinition): string {
    let sql = `${this.enclose(column.name)} ${column.type}`;
    if (column.$.unsigned) sql += ' UNSIGNED'
    sql += column.$.nullable ? ' NULL' : ' NOT NULL'
    if (column.$.autoIncrement) sql += ' GENERATED BY DEFAULT AS IDENTITY'
    if (column.$.primary) {
      sql += ' PRIMARY KEY'
    } else if (column.$.unique) {
      sql += (column.$.key) ? ' UNIQUE KEY' : ' UNIQUE'
    }
    if (column.$.default) sql += ` DEFAULT ${column.$.default}`
    if (column instanceof TimestampColumnDefinition) {
      if (column.$.onUpdate) sql += ` ON UPDATE ${column.$.onUpdate}`
    }
    if (column.$.key) sql += ` KEY ${column.$.key}`
    if (column.$.comment) sql += ` COMMENT '${column.$.comment}'`
    return sql
  }

  public toCreateStatement(): string {
    let sql = 'CREATE '
    if (this.$.temporary) sql += 'TEMPORARY '
    sql += 'TABLE ' + this.enclose(this.tableName) + ' (\n'
    sql += this.columns.map(column => {
      return '  ' + this.columnToSql(column)
    }).join(',\n')
    sql += '\n)'

    const tableOptions:string[] = []
    if (this.$.engine) tableOptions.push(`ENGINE=${this.$.engine}`)
    if (this.$.charset) tableOptions.push(`DEFAULT CHARSET=${this.$.charset}`)
    if (this.$.collation) tableOptions.push(`COLLATE=${this.$.collation}`)
    if (this.$.comment) tableOptions.push(`COMMENT='${this.$.comment}'`)
    if (tableOptions) sql += `\n${tableOptions.join('\n')}`
    return sql.trim()
  }

  public toUpdateStatement(): string {
      throw new Error('Method not implemented.');
  }
}
