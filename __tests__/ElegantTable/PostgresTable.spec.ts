import PostgresTable from '../../lib/schema/PostgresTable.js';
import Elegant from '../../src/Elegant.js';

describe('PostgresTable', () => {
  let table:PostgresTable;
  let db:Elegant;

  beforeEach(async () => {
    db = await Elegant.connection('postgres')
    table = new PostgresTable('users', 'create', db)
  })

  describe('json columns', () => {
    it('json', async () => {
      table.json('data')
      const expected = `CREATE TABLE "users" (\n  "data" JSONB\n)`
      const sql = await table.toStatement()
      expect(sql).toEqual(expected)
    })
  })
  describe('boolean', () => {
    it('boolean', async () => {
      table.boolean('is_active')
      const sql = await table.toStatement()
      const expected = 'CREATE TABLE "users" (\n  "is_active" BOOLEAN\n)'
      expect(sql).toEqual(expected)
    })
    it('boolean with default value', async () => {
      table.boolean('is_active', true)
      const sql = await table.toStatement()
      const expected = 'CREATE TABLE "users" (\n  "is_active" BOOLEAN DEFAULT true\n)'
      expect(sql).toEqual(expected)
    })
  })

  describe('modifiers', () => {
    it('autoIncrement', async () => {
      table.integer('id', 255).autoIncrement().primary()
      const sql = await table.toStatement()
      const expected = 'CREATE TABLE "users" (\n  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY\n)'
      expect(sql).toEqual(expected)
    })
  })
  it('multiple primary keys', async () => {
    table.integer('id', 255).autoIncrement().primary()
    table.string('username').primary()
    const expected = `CREATE TABLE "users" (\n  "id" INT GENERATED BY DEFAULT AS IDENTITY,\n  "username" VARCHAR(255),\nPRIMARY KEY("id", "username")\n)`
    const sql = await table.toStatement()
    expect(sql).toEqual(expected)
  })
  it('shorthand multiple primary keys', async () => {
    table.integer('id')
    table.string('username')
    table.primary(['id', 'username'])
    const expected = `CREATE TABLE "users" (\n  "id" INT,\n  "username" VARCHAR(255),\nPRIMARY KEY("id", "username")\n)`
    const sql = await table.toStatement()
    expect(sql).toEqual(expected)
  })
});
